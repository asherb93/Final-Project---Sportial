plugins {
  //  id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

    alias(libs.plugins.androidApplication)
    alias(libs.plugins.googleAndroidLibrariesMapsplatformSecretsGradlePlugin)
    alias(libs.plugins.googleGmsGoogleServices)


}
secrets {
    // Optionally specify a different file name containing your secrets.
    // The plugin defaults to "local.properties"
    propertiesFileName = "secrets.properties"

    // A properties file containing default secret values. This file can be
    // checked in version control.
    defaultPropertiesFileName = "local.defaults.properties"

    // Configure which keys should be ignored by the plugin by providing regular expressions.
    // "sdk.dir" is ignored by default.
    ignoreList.add("keyToIgnore") // Ignore the key "keyToIgnore"
    ignoreList.add("sdk.*")       // Ignore all keys matching the regexp "sdk.*"
}

android {
    namespace 'com.example.sportial'
    compileSdk 34

    defaultConfig {
        manifestPlaceholders = [file_provider: "Sportial"] //add your application package.
        applicationId "com.example.sportial"
        minSdk 27
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {


    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.play.services.maps
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.firebase.database
    implementation libs.firebase.auth
    implementation libs.firebase.crashlytics.buildtools
    implementation libs.firebase.storage
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    def fragment_version = "1.7.1"

    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"

    // Import the BoM for the Firebase platform
        implementation platform('com.google.firebase:firebase-bom:33.1.0')
    implementation 'com.google.firebase:firebase-analytics'

        // Declare the dependencies for the desired Firebase products without specifying versions
        // For example, declare the dependencies for Firebase Authentication and Cloud Firestore
        implementation 'com.google.firebase:firebase-auth'
        implementation 'com.google.firebase:firebase-firestore'
    // Add the dependency for the Cloud Storage library
    // When using the BoM, you don't specify versions in Firebase library dependencies
        implementation'com.google.firebase:firebase-storage'
    //Adding gSon library to project
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.firebaseui:firebase-ui-storage:7.2.0'
//glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //nav bar
    implementation 'com.google.android.material:material:1.3.0'
    //chat UI
    implementation 'com.cometchat:chat-uikit-android:4.3.10'
    // Maps SDK for Android
    implementation 'com.google.android.gms:play-services-maps:18.2.0'

}

